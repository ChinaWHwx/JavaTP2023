封装是Java面向对象编程中的一个核心概念，它是指隐藏类的实现细节并通过公共方法提供对类成员的访问。封装有助于提高代码的安全性、可维护性和可复用性。

在Java中，可以使用访问修饰符来控制类的成员的可见性。有三种访问修饰符：

#public：被public修饰的成员可以被类的任何地方访问。

#private：被private修饰的成员只能在类的内部访问。

#protected：被protected修饰的成员只能在类的内部以及继承该类的子类中访问。

通常，将成员变量声明为private，然后提供公共方法来访问和修改这些变量。
这些公共方法通常被称为getter和setter方法。
getter方法用于获取成员变量的值，而setter方法用于设置成员变量的值。
通过使用getter和setter方法，可以保护成员变量不受非法访问和修改，同时也可以对变量的访问加以控制。

在这个例子中，Person类有两个私有成员变量name和age。

通过使用公共的getter和setter方法，可以控制对这些变量的访问。

在setAge()方法中，使用条件语句来检查传递的年龄值是否为负数，如果是则输出错误消息。这种方式可以确保age变量不会被设置为负数。

总之，封装是Java编程中一个非常重要的概念，它可以帮助我们编写更安全、更可维护和更可复用的代码。

这里将对象传递给println()方法时，会自动调用该对象的toString()方法，在Java中，每个类都有默认的toString()方法，
其实现方式是返回该对象的类名和散列码的字符串表示形式，如：vehicule.Voiture@28a418fc 
因此，我们可以根据需要自定义toString()。

之所以重写(override)toString()方法，是因为我们需要在打印对象时避免手动拼接字符串。